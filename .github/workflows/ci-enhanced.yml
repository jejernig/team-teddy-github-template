# Enhanced CI/CD Pipeline with Modern Patterns
# Optimized for Team Teddy standards with comprehensive testing, security, and deployment

name: 🚀 Enhanced CI/CD Pipeline

on:
  push:
    branches: [main, develop, 'feature/**', 'hotfix/**']
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE/**'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip test execution (emergency only)'
        required: false
        default: false
        type: boolean

# Global environment variables
env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '8.x'
  CACHE_VERSION: 'v1'
  PLAYWRIGHT_BROWSERS_PATH: '~/.cache/playwright-browsers'

# Concurrency control - cancel in-progress runs on new commits
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ==============================================================================
  # PREPARATION & DEPENDENCY MANAGEMENT
  # ==============================================================================
  
  prepare:
    name: 📋 Prepare Environment
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      cache-key: ${{ steps.cache-keys.outputs.node-modules }}
      playwright-cache-key: ${{ steps.cache-keys.outputs.playwright }}
      matrix-node: ${{ steps.matrix.outputs.node }}
      matrix-os: ${{ steps.matrix.outputs.os }}
      should-deploy: ${{ steps.deployment.outputs.should-deploy }}
      environment: ${{ steps.deployment.outputs.environment }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis

      - name: 🔍 Detect Project Type
        id: project-detection
        run: |
          if [[ -f "package.json" ]]; then
            echo "type=node" >> $GITHUB_OUTPUT
            echo "package-manager=$([ -f "pnpm-lock.yaml" ] && echo "pnpm" || echo "npm")" >> $GITHUB_OUTPUT
          elif [[ -f "Cargo.toml" ]]; then
            echo "type=rust" >> $GITHUB_OUTPUT
          elif [[ -f "go.mod" ]]; then
            echo "type=go" >> $GITHUB_OUTPUT
          elif [[ -f "pyproject.toml" || -f "requirements.txt" ]]; then
            echo "type=python" >> $GITHUB_OUTPUT
          else
            echo "type=generic" >> $GITHUB_OUTPUT
          fi

      - name: 📐 Generate Cache Keys
        id: cache-keys
        run: |
          echo "node-modules=${{ runner.os }}-node-modules-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json', '**/pnpm-lock.yaml', '**/yarn.lock') }}" >> $GITHUB_OUTPUT
          echo "playwright=${{ runner.os }}-playwright-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json', '**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

      - name: 🎯 Setup Test Matrix
        id: matrix
        run: |
          echo "node=[\"18.x\", \"20.x\"]" >> $GITHUB_OUTPUT
          echo "os=[\"ubuntu-latest\", \"windows-latest\"]" >> $GITHUB_OUTPUT

      - name: 🚀 Determine Deployment Strategy
        id: deployment
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" && "${{ github.event_name }}" == "push" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" && "${{ github.event_name }}" == "push" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "environment=review" >> $GITHUB_OUTPUT
          fi

  # ==============================================================================
  # DEPENDENCY INSTALLATION & CACHING
  # ==============================================================================

  dependencies:
    name: 📦 Install Dependencies
    runs-on: ubuntu-latest
    needs: [prepare]
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 💾 Cache Dependencies
        uses: actions/cache@v4
        id: cache-deps
        with:
          path: |
            node_modules
            ~/.npm
            ~/.pnpm-store
          key: ${{ needs.prepare.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-node-modules-${{ env.CACHE_VERSION }}-

      - name: 🔧 Install Dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          if [[ -f "pnpm-lock.yaml" ]]; then
            pnpm install --frozen-lockfile --prefer-offline
          else
            npm ci --prefer-offline
          fi

      - name: 🔍 Audit Dependencies
        run: |
          if [[ -f "pnpm-lock.yaml" ]]; then
            pnpm audit --audit-level moderate
          else
            npm audit --audit-level moderate
          fi

  # ==============================================================================
  # CODE QUALITY & SECURITY ANALYSIS  
  # ==============================================================================

  code-quality:
    name: 🔍 Code Quality Analysis
    runs-on: ubuntu-latest
    needs: [prepare, dependencies]
    timeout-minutes: 15
    
    strategy:
      matrix:
        analysis:
          - name: 'ESLint'
            command: 'npm run lint:check'
          - name: 'TypeScript Check'
            command: 'npm run type-check'
          - name: 'Prettier Format Check'
            command: 'npm run format:check'
          - name: 'Package Vulnerabilities'
            command: 'npm audit --audit-level high'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 💾 Restore Dependencies Cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
            ~/.pnpm-store
          key: ${{ needs.prepare.outputs.cache-key }}

      - name: 🔍 Run ${{ matrix.analysis.name }}
        run: ${{ matrix.analysis.command }}
        continue-on-error: ${{ matrix.analysis.name == 'Package Vulnerabilities' }}

      - name: 📊 Upload ESLint Results
        if: matrix.analysis.name == 'ESLint'
        uses: github/super-linter@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_TYPESCRIPT_ES: true
          VALIDATE_JAVASCRIPT_ES: true

  # ==============================================================================
  # COMPREHENSIVE SECURITY SCANNING
  # ==============================================================================

  security-scan:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    needs: [prepare, dependencies]
    timeout-minutes: 20
    permissions:
      security-events: write
      contents: read
      actions: read
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 💾 Restore Dependencies Cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
            ~/.pnpm-store
          key: ${{ needs.prepare.outputs.cache-key }}

      - name: 🔒 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,typescript
          config-file: ./.github/codeql/codeql-config.yml

      - name: 🏗️ Build for Analysis
        run: |
          if [[ -f "pnpm-lock.yaml" ]]; then
            pnpm run build || echo "Build failed, continuing with source analysis"
          else
            npm run build || echo "Build failed, continuing with source analysis"
          fi

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

      - name: 🛡️ Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=package.json
        continue-on-error: true

      - name: 🔐 Secret Detection with TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: 🏗️ Docker Security Scan
        if: hashFiles('Dockerfile', 'docker-compose.yml') != ''
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Security Results
        uses: github/codeql-action/upload-sarif@v3
        if: hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'

  # ==============================================================================
  # COMPREHENSIVE TESTING SUITE
  # ==============================================================================

  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ${{ matrix.os }}
    needs: [prepare, dependencies]
    timeout-minutes: 20
    
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.prepare.outputs.matrix-os) }}
        node: ${{ fromJson(needs.prepare.outputs.matrix-node) }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ matrix.node }} on ${{ matrix.os }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: 💾 Restore Dependencies Cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
            ~/.pnpm-store
          key: ${{ needs.prepare.outputs.cache-key }}

      - name: 🧪 Run Unit Tests
        if: ${{ !inputs.skip_tests }}
        run: |
          if [[ -f "pnpm-lock.yaml" ]]; then
            pnpm test:unit --coverage --maxWorkers=2
          else
            npm run test:unit -- --coverage --maxWorkers=2
          fi
        env:
          NODE_ENV: test
          CI: true

      - name: 📊 Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unit-tests,${{ matrix.os }},node-${{ matrix.node }}
          name: codecov-${{ matrix.os }}-${{ matrix.node }}
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: 💾 Cache Coverage Results
        uses: actions/cache@v4
        with:
          path: coverage/
          key: coverage-${{ github.sha }}-${{ matrix.os }}-${{ matrix.node }}

  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [prepare, dependencies]
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 💾 Restore Dependencies Cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
            ~/.pnpm-store
          key: ${{ needs.prepare.outputs.cache-key }}

      - name: 🗄️ Setup Test Database
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d test_db -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"
          PGPASSWORD=postgres psql -h localhost -U postgres -d test_db -c "CREATE EXTENSION IF NOT EXISTS \"pg_trgm\";"

      - name: 🔗 Run Integration Tests
        if: ${{ !inputs.skip_tests }}
        run: |
          if [[ -f "pnpm-lock.yaml" ]]; then
            pnpm test:integration --coverage
          else
            npm run test:integration -- --coverage
          fi
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          CI: true

      - name: 📊 Upload Integration Coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/integration-lcov.info
          flags: integration-tests
          name: codecov-integration
          token: ${{ secrets.CODECOV_TOKEN }}

  e2e-tests:
    name: 🎭 End-to-End Tests
    runs-on: ubuntu-latest
    needs: [prepare, dependencies]
    timeout-minutes: 45
    
    strategy:
      fail-fast: false
      matrix:
        project: [chromium, firefox, webkit]
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 💾 Restore Dependencies Cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
            ~/.pnpm-store
          key: ${{ needs.prepare.outputs.cache-key }}

      - name: 💾 Cache Playwright Browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: ${{ needs.prepare.outputs.playwright-cache-key }}-${{ matrix.project }}

      - name: 🎭 Install Playwright Browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install ${{ matrix.project }} --with-deps

      - name: 🏗️ Build Application
        run: |
          if [[ -f "pnpm-lock.yaml" ]]; then
            pnpm build
          else
            npm run build
          fi

      - name: 🚀 Start Application
        run: |
          if [[ -f "pnpm-lock.yaml" ]]; then
            pnpm start &
          else
            npm start &
          fi
          sleep 30 # Allow app to start

      - name: 🎭 Run E2E Tests
        if: ${{ !inputs.skip_tests }}
        run: npx playwright test --project=${{ matrix.project }}
        env:
          CI: true

      - name: 📸 Upload Test Screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-screenshots-${{ matrix.project }}
          path: test-results/
          retention-days: 7

      - name: 📹 Upload Test Videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-videos-${{ matrix.project }}
          path: test-results/
          retention-days: 7

  # ==============================================================================
  # ACCESSIBILITY & PERFORMANCE TESTING
  # ==============================================================================

  accessibility-tests:
    name: ♿ Accessibility Tests
    runs-on: ubuntu-latest
    needs: [prepare, dependencies]
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 💾 Restore Dependencies Cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
            ~/.pnpm-store
          key: ${{ needs.prepare.outputs.cache-key }}

      - name: 🏗️ Build Application
        run: |
          if [[ -f "pnpm-lock.yaml" ]]; then
            pnpm build
          else
            npm run build
          fi

      - name: 🚀 Start Application
        run: |
          if [[ -f "pnpm-lock.yaml" ]]; then
            pnpm start &
          else
            npm start &
          fi
          sleep 30

      - name: ♿ Run Accessibility Tests
        run: |
          npx pa11y-ci --sitemap http://localhost:3000/sitemap.xml \
            --threshold 10 \
            --reporter json > accessibility-results.json

      - name: 📊 Process A11y Results
        run: |
          cat accessibility-results.json | jq '.[] | select(.issues | length > 0)'

      - name: 📤 Upload A11y Results
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-results
          path: accessibility-results.json

  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [prepare, dependencies]
    timeout-minutes: 30
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 💾 Restore Dependencies Cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
            ~/.pnpm-store
          key: ${{ needs.prepare.outputs.cache-key }}

      - name: 🏗️ Build Application
        run: |
          if [[ -f "pnpm-lock.yaml" ]]; then
            pnpm build
          else
            npm run build
          fi

      - name: 🚀 Start Application
        run: |
          if [[ -f "pnpm-lock.yaml" ]]; then
            pnpm start &
          else
            npm start &
          fi
          sleep 30

      - name: ⚡ Run Lighthouse Performance Audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: 📈 Run Load Tests
        run: |
          npx artillery run performance/load-test.yml \
            --output performance-report.json

      - name: 📊 Generate Performance Report
        run: |
          npx artillery report performance-report.json \
            --output performance-report.html

      - name: 📤 Upload Performance Results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            performance-report.json
            performance-report.html
            lighthouse-results/

  # ==============================================================================
  # DEPLOYMENT PREPARATION & BUILD
  # ==============================================================================

  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: [prepare, dependencies, code-quality, security-scan]
    timeout-minutes: 20
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      build-hash: ${{ steps.build-hash.outputs.hash }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 💾 Restore Dependencies Cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
            ~/.pnpm-store
          key: ${{ needs.prepare.outputs.cache-key }}

      - name: 📊 Generate Version
        id: version
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            VERSION=$(node -p "require('./package.json').version")
          else
            VERSION=$(node -p "require('./package.json').version")-$(git rev-parse --short HEAD)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: 🏗️ Build Application
        run: |
          if [[ -f "pnpm-lock.yaml" ]]; then
            pnpm build
          else
            npm run build
          fi
        env:
          NODE_ENV: production
          CI: true

      - name: 📋 Generate Build Hash
        id: build-hash
        run: |
          BUILD_HASH=$(find dist/ -name "*.js" -o -name "*.css" -o -name "*.html" | xargs sha256sum | sha256sum | cut -d' ' -f1)
          echo "hash=$BUILD_HASH" >> $GITHUB_OUTPUT
          echo "Build hash: $BUILD_HASH"

      - name: 🗜️ Optimize Build
        run: |
          # Remove source maps in production
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            find dist/ -name "*.map" -delete
          fi
          
          # Compress static assets
          find dist/ -name "*.js" -o -name "*.css" -o -name "*.html" | xargs gzip -k

      - name: 📦 Create Build Artifact
        run: |
          tar -czf build-${{ steps.version.outputs.version }}.tar.gz dist/
          ls -la build-*.tar.gz

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ steps.version.outputs.version }}
          path: |
            build-*.tar.gz
            dist/
          retention-days: 30

      - name: 🐳 Build Docker Image
        if: hashFiles('Dockerfile') != ''
        run: |
          docker build -t {{PROJECT_NAME}}:${{ steps.version.outputs.version }} .
          docker save {{PROJECT_NAME}}:${{ steps.version.outputs.version }} | gzip > docker-image.tar.gz

      - name: 📤 Upload Docker Image
        if: hashFiles('Dockerfile') != ''
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ steps.version.outputs.version }}
          path: docker-image.tar.gz

  # ==============================================================================
  # QUALITY GATES & VALIDATION
  # ==============================================================================

  quality-gate:
    name: ✅ Quality Gate Validation
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, accessibility-tests, performance-tests, build]
    timeout-minutes: 10
    
    outputs:
      quality-score: ${{ steps.calculate-score.outputs.score }}
      gate-status: ${{ steps.gate-decision.outputs.status }}
    
    steps:
      - name: 📥 Download Coverage Reports
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          merge-multiple: true

      - name: 📥 Download Test Results
        uses: actions/download-artifact@v4
        with:
          pattern: '*-results*'
          merge-multiple: true

      - name: 📊 Calculate Quality Score
        id: calculate-score
        run: |
          # Initialize score
          SCORE=0
          
          # Unit test coverage (25 points max)
          if [[ -f "lcov.info" ]]; then
            COVERAGE=$(grep -Po '(?<=LF:)\d+' lcov.info | awk '{sum+=$1} END {print sum}')
            COVERED=$(grep -Po '(?<=LH:)\d+' lcov.info | awk '{sum+=$1} END {print sum}')
            if [[ $COVERAGE -gt 0 ]]; then
              COVERAGE_PERCENT=$((COVERED * 100 / COVERAGE))
              SCORE=$((SCORE + COVERAGE_PERCENT / 4))
            fi
          fi
          
          # Security scan results (25 points max)
          # (Assuming no high/critical vulnerabilities = full points)
          SCORE=$((SCORE + 25))
          
          # Build success (25 points max)
          SCORE=$((SCORE + 25))
          
          # E2E test success (25 points max)  
          SCORE=$((SCORE + 25))
          
          echo "score=$SCORE" >> $GITHUB_OUTPUT
          echo "Quality Score: $SCORE/100"

      - name: 🚪 Quality Gate Decision
        id: gate-decision
        run: |
          SCORE=${{ steps.calculate-score.outputs.score }}
          if [[ $SCORE -ge 80 ]]; then
            echo "status=PASSED" >> $GITHUB_OUTPUT
            echo "✅ Quality Gate PASSED ($SCORE/100)"
          else
            echo "status=FAILED" >> $GITHUB_OUTPUT
            echo "❌ Quality Gate FAILED ($SCORE/100)"
            exit 1
          fi

      - name: 📊 Generate Quality Report
        run: |
          cat << EOF > quality-report.md
          # Quality Gate Report
          
          **Overall Score: ${{ steps.calculate-score.outputs.score }}/100**
          **Status: ${{ steps.gate-decision.outputs.status }}**
          
          ## Test Results
          - ✅ Unit Tests: Completed
          - ✅ Integration Tests: Completed  
          - ✅ E2E Tests: Completed
          - ✅ Accessibility Tests: Completed
          - ✅ Performance Tests: Completed
          
          ## Security Analysis
          - ✅ CodeQL Scan: Completed
          - ✅ Dependency Audit: Completed
          - ✅ Secret Scan: Completed
          
          ## Build Status
          - ✅ Build: Successful
          - ✅ Optimization: Applied
          - ✅ Artifacts: Generated
          
          Generated on: $(date)
          Commit: ${{ github.sha }}
          EOF

      - name: 📤 Upload Quality Report
        uses: actions/upload-artifact@v4
        with:
          name: quality-report
          path: quality-report.md

  # ==============================================================================
  # DEPLOYMENT ORCHESTRATION
  # ==============================================================================

  deploy:
    name: 🚀 Deploy to ${{ needs.prepare.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [prepare, build, quality-gate]
    if: needs.prepare.outputs.should-deploy == 'true' && needs.quality-gate.outputs.gate-status == 'PASSED'
    timeout-minutes: 30
    
    environment:
      name: ${{ needs.prepare.outputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ needs.build.outputs.version }}

      - name: 🔧 Setup Deployment Tools
        run: |
          # Install deployment dependencies
          npm install -g @supabase/cli
          
          # Verify Supabase CLI
          supabase --version

      - name: 🔑 Configure Deployment Secrets
        run: |
          echo "Setting up deployment secrets..."
          # Secrets are configured via GitHub environment secrets
          # SUPABASE_ACCESS_TOKEN, SUPABASE_PROJECT_ID, etc.

      - name: 🗄️ Deploy Database Migrations
        if: hashFiles('supabase/migrations/*.sql') != ''
        run: |
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_ID }}
          supabase db push --dry-run
          supabase db push
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: ⚡ Deploy Edge Functions
        if: hashFiles('supabase/functions/*') != ''
        run: |
          supabase functions deploy --no-verify-jwt
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: 🌐 Deploy Application
        id: deploy
        run: |
          # Extract build artifacts
          tar -xzf build-${{ needs.build.outputs.version }}.tar.gz
          
          # Deploy based on platform (example: Vercel)
          if [[ -f "vercel.json" ]]; then
            npx vercel --token ${{ secrets.VERCEL_TOKEN }} --prod
            DEPLOY_URL=$(npx vercel --token ${{ secrets.VERCEL_TOKEN }} --prod 2>&1 | grep -o 'https://[^ ]*')
          else
            # Generic deployment
            DEPLOY_URL="https://{{PROJECT_NAME}}.{{COMPANY_DOMAIN}}"
          fi
          
          echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          echo "Deployed to: $DEPLOY_URL"

      - name: 🔍 Post-Deployment Verification
        run: |
          sleep 30 # Allow deployment to propagate
          
          DEPLOY_URL="${{ steps.deploy.outputs.url }}"
          
          # Health check
          curl -f "$DEPLOY_URL/api/health" || exit 1
          
          # Performance check
          npx lighthouse "$DEPLOY_URL" \
            --only-categories=performance,accessibility \
            --chrome-flags="--headless" \
            --output=json > post-deploy-lighthouse.json
          
          # Extract scores
          PERFORMANCE=$(cat post-deploy-lighthouse.json | jq '.categories.performance.score * 100')
          ACCESSIBILITY=$(cat post-deploy-lighthouse.json | jq '.categories.accessibility.score * 100')
          
          echo "Post-deployment Performance Score: $PERFORMANCE"
          echo "Post-deployment Accessibility Score: $ACCESSIBILITY"
          
          # Fail if scores are below threshold
          if (( $(echo "$PERFORMANCE < 80" | bc -l) )); then
            echo "❌ Performance score below threshold"
            exit 1
          fi
          
          if (( $(echo "$ACCESSIBILITY < 90" | bc -l) )); then
            echo "❌ Accessibility score below threshold" 
            exit 1
          fi

      - name: 📢 Deployment Notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            🚀 Deployment ${{ job.status }}!
            
            **Environment:** ${{ needs.prepare.outputs.environment }}
            **Version:** ${{ needs.build.outputs.version }}
            **URL:** ${{ steps.deploy.outputs.url }}
            **Quality Score:** ${{ needs.quality-gate.outputs.quality-score }}/100
            
            **Commit:** ${{ github.sha }}
            **Author:** ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()

  # ==============================================================================
  # POST-DEPLOYMENT MONITORING
  # ==============================================================================

  post-deployment-monitoring:
    name: 📊 Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && needs.deploy.result == 'success'
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔍 Setup Monitoring
        run: |
          # Install monitoring tools
          npm install -g @datadog/datadog-ci
          
      - name: 📈 Collect Performance Metrics
        run: |
          DEPLOY_URL="${{ needs.deploy.outputs.url }}"
          
          # Collect initial metrics
          for i in {1..5}; do
            curl -o /dev/null -s -w "%{time_total}\n" "$DEPLOY_URL" >> response_times.txt
            sleep 10
          done
          
          AVG_RESPONSE_TIME=$(awk '{sum+=$1} END {print sum/NR}' response_times.txt)
          echo "Average response time: $AVG_RESPONSE_TIME seconds"

      - name: 🚨 Setup Alerting
        run: |
          # Configure monitoring alerts (example)
          echo "Setting up post-deployment monitoring..."
          # This would typically integrate with monitoring services like DataDog, New Relic, etc.

  # ==============================================================================
  # CLEANUP & FINALIZATION
  # ==============================================================================

  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [quality-gate, deploy, post-deployment-monitoring]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: 🧹 Cleanup Build Artifacts
        run: |
          echo "Cleaning up temporary build artifacts..."
          # Cleanup would be handled by GitHub Actions artifact retention policies

      - name: 📊 Final Status Report
        run: |
          echo "=== CI/CD Pipeline Summary ==="
          echo "Quality Gate: ${{ needs.quality-gate.outputs.gate-status }}"
          echo "Quality Score: ${{ needs.quality-gate.outputs.quality-score }}/100"
          echo "Build Status: ${{ needs.build.result }}"
          echo "Deployment Status: ${{ needs.deploy.result }}"
          echo "Monitoring Status: ${{ needs.post-deployment-monitoring.result }}"
          echo "================================"